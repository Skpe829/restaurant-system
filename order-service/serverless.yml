service: restaurant-order-service
frameworkVersion: '3'

provider:
  name: aws
  runtime: provided.al2
  region: us-east-1
  stage: ${opt:stage, 'dev'}
  environment:
    STAGE: ${self:provider.stage}
    REGION: ${self:provider.region}
  # ✅ AÑADIR: Permisos IAM para DynamoDB
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:PutItem
            - dynamodb:GetItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:BatchGetItem
            - dynamodb:BatchWriteItem
          Resource:
            - Fn::GetAtt: [OrdersTable, Arn]
            - Fn::Join:
                - '/'
                - - Fn::GetAtt: [OrdersTable, Arn]
                  - 'index/*'

custom:
  httpApi:
    cors:
      allowedOrigins:
        - "http://localhost:3000"
        - "https://*.vercel.app"
      allowedHeaders:
        - Content-Type
        - Authorization
      allowedMethods:
        - GET
        - POST
        - PUT
        - DELETE
        - OPTIONS
      allowCredentials: true

functions:
  web:
    handler: public/index.php
    timeout: 28
    memorySize: 512
    layers:
      - ${bref:layer.php-82-fpm}
    environment:
      BREF_BINARY_RESPONSES: 1
      APP_ENV: production
      APP_DEBUG: false
      APP_KEY: base64:Pxn3KuFjKOybk4GJa/yApPhT2BU4xQj89pnXdxxW7dE=
      DB_CONNECTION: array
      CACHE_DRIVER: array
      SESSION_DRIVER: array
      QUEUE_CONNECTION: sync
      LOG_CHANNEL: stderr

      # ✅ AÑADIR: Variable para tabla DynamoDB
      DYNAMODB_TABLE: restaurant-orders-${self:provider.stage}

      # URLs de otros servicios
      KITCHEN_SERVICE_URL: ${cf:restaurant-kitchen-service-${self:provider.stage}.KitchenServiceUrl}
      WAREHOUSE_SERVICE_URL: ${cf:restaurant-warehouse-service-${self:provider.stage}.WarehouseServiceUrl}
      MARKETPLACE_SERVICE_URL: ${cf:restaurant-marketplace-service-${self:provider.stage}.MarketplaceServiceUrl}
    events:
      - httpApi:
          path: /{proxy+}
          method: ANY
      - httpApi:
          path: /
          method: ANY

  artisan:
    handler: artisan
    timeout: 120
    layers:
      - ${bref:layer.php-82}
      - ${bref:layer.console}
    environment:
      APP_ENV: production
      APP_KEY: base64:Pxn3KuFjKOybk4GJa/yApPhT2BU4xQj89pnXdxxW7dE=
      DB_CONNECTION: array
      # ✅ AÑADIR: Variable para Artisan
      DYNAMODB_TABLE: restaurant-orders-${self:provider.stage}

resources:
  Resources:
    OrdersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: restaurant-orders-${self:provider.stage}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: status
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: status-index
            KeySchema:
              - AttributeName: status
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        # ✅ AÑADIR: Configuraciones de producción
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true
        SSESpecification:
          SSEEnabled: true
        Tags:
          - Key: Environment
            Value: ${self:provider.stage}
          - Key: Service
            Value: order
          - Key: Project
            Value: restaurant-system

  Outputs:
    OrderServiceUrl:
      Description: "Order Service API URL"
      Value:
        Fn::Join:
          - ''
          - - 'https://'
            - Ref: HttpApi
            - '.execute-api.'
            - ${self:provider.region}
            - '.amazonaws.com'
      Export:
        Name: OrderServiceUrl-${self:provider.stage}

plugins:
  - ./vendor/bref/bref